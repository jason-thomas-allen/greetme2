//
//  GreetMeTests-GreetMeFrameworkMocks.generated.swift
//  GreetMeFramework
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import GreetMeFramework
@testable import Mockingbird
import Foundation
import Swift
import SwiftUI

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked AuthService
public final class AuthServiceMock: GreetMeFramework.AuthService, Mockingbird.Mock {
  typealias MockingbirdSupertype = GreetMeFramework.AuthService
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "GreetMeFramework"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    AuthServiceMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `login`(`userName`: String, `password`: String)
  public func `login`(`userName`: String, `password`: String) throws -> Void {
    return try self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`login`(`userName`: String, `password`: String) throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`userName`), Mockingbird.ArgumentMatcher(`password`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String, String) throws -> Void { return try mkbImpl(`userName`, `password`) }
      if let mkbImpl = mkbImpl as? () throws -> Void { return try mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = try mkbObject.`login`(userName: `userName`, password: `password`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `login`(`userName`: @autoclosure () -> String, `password`: @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.ThrowingFunctionDeclaration, (String, String) throws -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.ThrowingFunctionDeclaration, (String, String) throws -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`login`(`userName`: String, `password`: String) throws -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`userName`), Mockingbird.resolve(`password`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `AuthService`.
public func mock(_ type: GreetMeFramework.AuthService.Protocol, file: StaticString = #file, line: UInt = #line) -> AuthServiceMock {
  return AuthServiceMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
